# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "seconion1204"
  config.vm.boot_timeout = 300

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"
  config.vm.box_url = "http://jonschipp.com/vm/seconion1204.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080
  #

   # SecurityOnion start page: Point host browser to https://localhost:8443
   config.vm.network :forwarded_port, guest: 443, host: 8443
   # Snorby: Point host browser to https://localhost:8444
   config.vm.network :forwarded_port, guest: 444, host: 8444
   # ELSA: Point host browser to https://localhost:8154
   config.vm.network :forwarded_port, guest: 3154, host: 8154

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  # Default NAT is up (eth0, 10.0.2.15). REQUIRED for eth0.

  # Host-Only Adapter (eth2)
    config.vm.network "private_network", ip: "10.1.1.10", :netmask => "255.255.255.0", :adapter => 2

  # Bridged Adapater (eth3)
    #config.vm.network :public_network
    # config.vm.network "hostonly", "192.168.100.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true
  # Uses the Vagrant built-in insecure key
    config.ssh.username = "vagrant"
  # config.ssh.private_key_path = "~/.ssh/mykey"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  #config.vm.synced_folder "~/repos/so-scripts", "/so-scripts"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true

  # VM specific settings
    config.vm.provider "virtualbox" do |v|
     v.gui = true
     v.name = "seconion-standalone"
     v.customize ["modifyvm", :id, "--memory", "2048"]
     v.customize ["modifyvm", :id, "--cpus", 3]
   end

  # Shell script to provision machine
  config.vm.provision "shell", path: "provision.sh"

  #   config.vm.provision :puppet do |puppet|
  #      puppet.manifests_path = "~/repos/puppet/modules"
  #      puppet.module_path = "~/repos/puppet/modules"
  #     puppet.manifest_file  = "securityonion.pp"
  #   end

  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  #
end
